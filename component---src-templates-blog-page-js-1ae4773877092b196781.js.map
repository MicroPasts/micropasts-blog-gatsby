{"version":3,"file":"component---src-templates-blog-page-js-1ae4773877092b196781.js","mappings":"8TAMA,MAAMA,EAAO,QAAC,KAACC,GAAK,SAClB,gBAACC,EAAA,EAAS,CAACC,OAAK,GACd,gBAACD,EAAA,EAAS,KACR,gBAACE,EAAA,EAAG,KACDH,GAAQ,gBAACI,EAAA,EAAG,CAACC,GAAI,GAAIC,UAAU,aAC7BN,EAAKO,KAAI,CAACC,EAAMC,IACf,gBAAC,EAAAC,KAAI,CAACC,GAAE,SAAW,IAAUH,GAAK,IAAKF,UAAU,wCAC3CM,IAAKH,GAAI,IAAUD,SAKvB,EAOdT,EAAKc,aAAe,CAClBb,KAAK,IAGP,QCrBe,SAASc,EAAiB,GAA2B,IAA1BC,MAAM,eAACC,IAAgB,EAC7D,MAAM,YAACC,EAAW,WAAEC,EAAU,KAAEC,GAAQH,EACxC,OACI,gBAAC,IAAM,KACH,gBAACf,EAAA,EAAS,KACN,gBAACE,EAAA,EAAG,CAACG,UAAW,aACZ,uBAAKA,UAAU,QACX,sBAAIA,UAAU,gCAAgCW,EAAYG,OAC1D,sBAAId,UAAU,sBAAsBW,EAAYI,KAAI,OAAMJ,EAAYK,QAAUL,EAAYK,OAAOf,KAAIgB,GAClGA,EAAM,OAEX,sBAAIjB,UAAU,2BAAyB,GCnBxD,SAA2BkB,GAC9B,IAAIC,EAAOC,KAAKC,MAAMH,EAAU,GAChC,OAAIC,EAAO,EACG,IAAIG,MAAMF,KAAKC,MAAMF,EAAOC,KAAKG,IACtCC,KAAK,MACLC,KAAK,IAAG,IAAIP,EAAO,aAEd,IAAII,MAAMH,GAAQ,GAAGK,KAAK,MAAMC,KAAK,IAAG,KAClC,IAAZP,EAAgBA,EAAU,OAASA,EAAU,SAAO,sBAGhE,CDQoEQ,CAAkBd,KAElE,uBAAKZ,UAAU,oCACV2B,wBAAyB,CAACC,OAAQf,OAG9CF,EAAYkB,KAAO,gBAAC,EAAI,CAACnC,KAAMiB,EAAYkB,MAIxD,CAuBO,SAASC,EAAK,GAA2B,IAA1BrB,MAAM,eAACC,IAAgB,EACzC,MAAM,YAACC,GAAeD,EACtB,OACI,gBAAC,IAAG,CAACI,MAAOH,EAAYG,OAEhC,C,uBEzDA,IAuBIiB,EAvBmB,EAAQ,KAuBfC,EAAiB,SAASC,EAAQC,EAAMC,GACtD,OAAOF,GAAUE,EAAQ,IAAM,IAAMD,EAAKE,aAC5C,IAEAC,EAAOC,QAAUP,C","sources":["webpack://micropasts-blog-gatsby/./src/components/structure/tag.js","webpack://micropasts-blog-gatsby/./src/templates/blog-page.js","webpack://micropasts-blog-gatsby/./src/utils/helpers.js","webpack://micropasts-blog-gatsby/./node_modules/lodash/kebabCase.js"],"sourcesContent":["import React from \"react\"\nimport {kebabCase, startCase} from \"lodash\";\nimport PropTypes from \"prop-types\"\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport {Link} from \"gatsby\";\n\nconst Tags = ({tags}) => (\n  <Container fluid>\n    <Container>\n      <Row>\n        {tags && <Col md={12} className=\"px-4 mb-2\">\n          {tags.map((item, i) => (\n            <Link to={`/tags/${kebabCase(item)}/`} className=\"btn btn-dark mx-1 my-1 p-2 text-white\"\n                  key={i}>{startCase(item)}</Link>\n          ))}\n        </Col>}\n      </Row>\n    </Container>\n  </Container>\n)\n\nTags.propTypes = {\n  tags: PropTypes.array\n}\n\nTags.defaultProps = {\n  tags: ``,\n}\n\nexport default Tags;","import {graphql} from \"gatsby\";\nimport * as React from \"react\";\nimport Layout from \"../components/layout\";\nimport {Container, Row} from \"react-bootstrap\";\nimport Seo from \"../components/structure/SEO\";\nimport {formatReadingTime} from \"../utils/helpers\";\nimport Tags from \"../components/structure/tag\";\n\nexport default function BlogPageTemplate({data: {markdownRemark}}) {\n    const {frontmatter, timeToRead, html} = markdownRemark;\n    return (\n        <Layout>\n            <Container>\n                <Row className={\"post-body\"}>\n                    <div className=\"px-4\">\n                        <h1 className=\"text-black fw-bold mt-4 mb-2\">{frontmatter.title}</h1>\n                        <h2 className=\"text-primary small\">{frontmatter.date} By {frontmatter.author && frontmatter.author.map(writer => (\n                          `${writer} `\n                        ))}</h2>\n                        <h3 className=\"text-primary lead small\">{`${formatReadingTime(timeToRead)}`}</h3>\n                    </div>\n                    <div className=\"post-body bg-white text-black p-4\"\n                         dangerouslySetInnerHTML={{__html: html}}/>\n                </Row>\n            </Container>\n            {frontmatter.tag && <Tags tags={frontmatter.tag}/>}\n\n        </Layout>\n    );\n}\n\n\nexport const pageQuery = graphql`\n    query ($id: String!) {\n        markdownRemark(id: { eq: $id }) {\n            html\n            id\n            timeToRead\n            wordCount {\n              words\n             }\n            frontmatter {\n                permalink\n                date(formatString: \"MMMM DD, YYYY\")\n                title\n                author\n                tag\n            }\n        }\n    }\n`;\n\nexport function Head({data: {markdownRemark}}) {\n    const {frontmatter} = markdownRemark;\n    return (\n        <Seo title={frontmatter.title}  />\n    )\n}\n","export function formatReadingTime(minutes) {\n    let cups = Math.round(minutes / 5);\n    if (cups > 5) {\n        return `${new Array(Math.round(cups / Math.E))\n            .fill('🥪')\n            .join('')} ${minutes} mins read`;\n    } else {\n        return `${new Array(cups || 1).fill('🍵').join('')} ${\n            minutes === 1 ? minutes + \" min\" : minutes + \" mins\"\n        } to read (suggested)`;\n    }\n}","var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\nmodule.exports = kebabCase;\n"],"names":["Tags","tags","Container","fluid","Row","Col","md","className","map","item","i","Link","to","key","defaultProps","BlogPageTemplate","data","markdownRemark","frontmatter","timeToRead","html","title","date","author","writer","minutes","cups","Math","round","Array","E","fill","join","formatReadingTime","dangerouslySetInnerHTML","__html","tag","Head","kebabCase","createCompounder","result","word","index","toLowerCase","module","exports"],"sourceRoot":""}