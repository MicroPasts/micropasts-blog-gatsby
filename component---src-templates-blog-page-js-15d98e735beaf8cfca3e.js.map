{"version":3,"file":"component---src-templates-blog-page-js-15d98e735beaf8cfca3e.js","mappings":"6LAgDA,MAtCY,IAA2D,IAA1D,MAAEA,EAAK,YAAEC,EAAW,SAAEC,EAAQ,SAAEC,EAAQ,SAAEC,GAAU,EAC7D,MAAQJ,MAAOK,EAAcJ,YAAaK,EAAkB,MAAEC,EAAK,QAAEC,EAAO,cAAEC,ICRjEC,EAAAA,EAAAA,gBAAe,cAahBC,KAAKC,aDJXC,EATV,SAAwBT,EAAUG,GAC9B,OAAIH,EACOA,aAAQ,EAARA,EAAUU,gBAAgBC,gBAAgBC,OAAOC,SAASC,IAE9DX,CACX,CAI0BY,CAAef,EAASG,GACxCa,EAAM,CACRpB,MAAOA,GAASK,EAChBJ,YAAaA,GAAeK,EAC5BC,MAAM,GAAIC,EAAUK,EACpBQ,IAAI,GAAIb,GAAUN,GAAQ,IAC1BO,iBAGJ,OACI,gCACI,6BAAQW,EAAIpB,OACZ,wBAAMsB,KAAK,cAAcC,QAASH,EAAInB,cACtC,wBAAMqB,KAAK,QAAQC,QAASH,EAAIb,QAChC,wBAAMe,KAAK,eAAeC,QAAQ,wBAClC,wBAAMD,KAAK,gBAAgBC,QAASH,EAAIpB,QACxC,wBAAMsB,KAAK,cAAcC,QAASH,EAAIC,MACtC,wBAAMC,KAAK,sBAAsBC,QAASH,EAAInB,cAC9C,wBAAMqB,KAAK,gBAAgBC,QAASH,EAAIb,QACxC,wBAAMe,KAAK,kBAAkBC,QAASH,EAAIX,gBAC1C,wBAAMe,SAAS,SAASD,QAASH,EAAIC,IAAII,aACzC,wBAAMD,SAAS,WAAWD,QAASH,EAAIpB,QACvC,wBAAMwB,SAAS,UAAUD,QAAQ,YACjC,wBAAMC,SAAS,eAAeD,QAAQ,iBACtC,wBAAMC,SAAS,iBAAiBD,QAASH,EAAInB,cAC7C,wBAAMuB,SAAS,YAAYD,QAAQ,UACnC,wBAAMC,SAAS,WAAWD,QAASH,EAAIb,MAAMkB,aAC7C,wBAAMD,SAAS,eAAeD,QAAQ,oCACtC,wBAAMC,SAAS,iBAAiBD,QAAQ,QACxC,wBAAMC,SAAS,iBAAiBD,QAAQ,QACxC,wBAAMC,SAAS,gBAAgBD,QAAQ,eACtCpB,EACF,C,mJErCI,SAASuB,EAAiB,GAA2B,IAA1BC,MAAM,eAACC,IAAgB,EAC7D,MAAM,YAACC,EAAW,WAAEC,EAAU,KAAEC,GAAQH,EACxC,OACI,gBAAC,IAAM,KACH,gBAACI,EAAA,EAAS,KACN,gBAACC,EAAA,EAAG,CAACC,UAAW,aACZ,uBAAKA,UAAU,QACX,sBAAIA,UAAU,gCAAgCL,EAAY7B,OAC1D,sBAAIkC,UAAU,sBAAsBL,EAAYM,KAAI,OAAMN,EAAYO,QAAUP,EAAYO,OAAOC,KAAIC,GAClGA,EAAM,OAEX,sBAAIJ,UAAU,2BAAyB,GClBxD,SAA2BK,GAC9B,IAAIC,EAAOC,KAAKC,MAAMH,EAAU,GAChC,OAAIC,EAAO,EACG,IAAIG,MAAMF,KAAKC,MAAMF,EAAOC,KAAKG,IACtCC,KAAK,MACLC,KAAK,IAAG,IAAIP,EAAO,aAEd,IAAII,MAAMH,GAAQ,GAAGK,KAAK,MAAMC,KAAK,IAAG,KAClC,IAAZP,EAAgBA,EAAU,OAASA,EAAU,SAAO,sBAGhE,CDOoEQ,CAAkBjB,KAElE,uBAAKI,UAAU,oCACVc,wBAAyB,CAACC,OAAQlB,OAM3D,CAsBO,SAASmB,EAAK,GAA2B,IAA1BvB,MAAM,eAACC,IAAgB,EACzC,MAAM,YAACC,GAAeD,EACtB,OACI,gBAAC,IAAG,CAAC5B,MAAO6B,EAAY7B,OAEhC,C","sources":["webpack://micropasts-blog-gatsby/./src/components/structure/SEO.js","webpack://micropasts-blog-gatsby/./src/hooks/use-site-metadata.js","webpack://micropasts-blog-gatsby/./src/templates/blog-page.js","webpack://micropasts-blog-gatsby/./src/utils/helpers.js"],"sourcesContent":["import React from \"react\"\nimport { useSiteMetadata } from \"../../hooks/use-site-metadata\"\n\nfunction createSeoImage(featured, image) {\n    if (featured) {\n        return featured?.childImageSharp.gatsbyImageData.images.fallback.src;\n    }\n    return image;\n}\n\nconst Seo = ({ title, description, pathname, children, featured }) => {\n    const { title: defaultTitle, description: defaultDescription, image, siteUrl, twitterHandle } = useSiteMetadata()\n    const featuredImage = createSeoImage(featured,image);\n    const seo = {\n        title: title || defaultTitle,\n        description: description || defaultDescription,\n        image: `${siteUrl}${featuredImage}`,\n        url: `${siteUrl}${pathname || ``}`,\n        twitterHandle,\n    }\n\n    return (\n        <>\n            <title>{seo.title}</title>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:title\" content={seo.title} />\n            <meta name=\"twitter:url\" content={seo.url} />\n            <meta name=\"twitter:description\" content={seo.description} />\n            <meta name=\"twitter:image\" content={seo.image} />\n            <meta name=\"twitter:creator\" content={seo.twitterHandle} />\n            <meta property=\"og:url\" content={seo.url.toString()} />\n            <meta property=\"og:title\" content={seo.title} />\n            <meta property=\"og:type\" content=\"website\" />\n            <meta property=\"og:site_name\" content=\"Museologi.st\" />\n            <meta property=\"og:description\" content={seo.description} />\n            <meta property=\"og:locale\" content=\"en-gb\" />\n            <meta property=\"og:image\" content={seo.image.toString()} />\n            <meta property=\"og:image:alt\" content=\"An image representing this post\" />\n            <meta property=\"og:image:width\" content=\"600\"/>\n            <meta property=\"og:image:width\" content=\"600\" />\n            <meta property=\"og:image:type\" content=\"image/jpeg\" />\n            {children}\n        </>\n    )\n}\n\nexport default Seo","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n    const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          twitterHandle\n          siteUrl\n        }\n      }\n    }\n  `)\n\n    return data.site.siteMetadata\n}","import {graphql} from \"gatsby\";\nimport * as React from \"react\";\nimport Layout from \"../components/layout\";\nimport {Container, Row} from \"react-bootstrap\";\nimport Seo from \"../components/structure/SEO\";\nimport {formatReadingTime} from \"../utils/helpers\";\n\nexport default function BlogPageTemplate({data: {markdownRemark}}) {\n    const {frontmatter, timeToRead, html} = markdownRemark;\n    return (\n        <Layout>\n            <Container>\n                <Row className={\"post-body\"}>\n                    <div className=\"px-4\">\n                        <h1 className=\"text-black fw-bold mt-4 mb-2\">{frontmatter.title}</h1>\n                        <h2 className=\"text-primary small\">{frontmatter.date} By {frontmatter.author && frontmatter.author.map(writer => (\n                          `${writer} `\n                        ))}</h2>\n                        <h3 className=\"text-primary lead small\">{`${formatReadingTime(timeToRead)}`}</h3>\n                    </div>\n                    <div className=\"post-body bg-white text-black p-4\"\n                         dangerouslySetInnerHTML={{__html: html}}/>\n                </Row>\n            </Container>\n\n        </Layout>\n    );\n}\n\n\nexport const pageQuery = graphql`\n    query ($id: String!) {\n        markdownRemark(id: { eq: $id }) {\n            html\n            id\n            timeToRead\n            wordCount {\n              words\n             }\n            frontmatter {\n                permalink\n                date(formatString: \"MMMM DD, YYYY\")\n                title\n                author\n            }\n        }\n    }\n`;\n\nexport function Head({data: {markdownRemark}}) {\n    const {frontmatter} = markdownRemark;\n    return (\n        <Seo title={frontmatter.title}  />\n    )\n}\n","export function formatReadingTime(minutes) {\n    let cups = Math.round(minutes / 5);\n    if (cups > 5) {\n        return `${new Array(Math.round(cups / Math.E))\n            .fill('ü•™')\n            .join('')} ${minutes} mins read`;\n    } else {\n        return `${new Array(cups || 1).fill('üçµ').join('')} ${\n            minutes === 1 ? minutes + \" min\" : minutes + \" mins\"\n        } to read (suggested)`;\n    }\n}"],"names":["title","description","pathname","children","featured","defaultTitle","defaultDescription","image","siteUrl","twitterHandle","useStaticQuery","site","siteMetadata","featuredImage","childImageSharp","gatsbyImageData","images","fallback","src","createSeoImage","seo","url","name","content","property","toString","BlogPageTemplate","data","markdownRemark","frontmatter","timeToRead","html","Container","Row","className","date","author","map","writer","minutes","cups","Math","round","Array","E","fill","join","formatReadingTime","dangerouslySetInnerHTML","__html","Head"],"sourceRoot":""}