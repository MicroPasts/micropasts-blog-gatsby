{"version":3,"file":"component---src-pages-authors-js-7fc1f1c7cb476cae2f2e.js","mappings":"uHAAA,IAuBIA,EAvBmB,EAAQ,KAuBfC,EAAiB,SAASC,EAAQC,EAAMC,GACtD,OAAOF,GAAUE,EAAQ,IAAM,IAAMD,EAAKE,aAC5C,IAEAC,EAAOC,QAAUP,C,kLC8BjB,UA7CoBQ,IAAA,IACAC,MACEC,mBAAmB,MAAEC,GACrBC,MACEC,cAAc,MAAEC,MAGrBN,EAAA,OACjBO,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAACE,EAAAA,EAAS,KACRF,EAAAA,cAACG,EAAAA,EAAG,CAACC,UAAW,aACdJ,EAAAA,cAAA,MAAII,UAAU,aAAY,QAC1BJ,EAAAA,cAAA,MAAII,UAAU,wBACXR,EAAMS,KAAIC,GACTN,EAAAA,cAAA,MAAIO,IAAKD,EAAOE,WAAYJ,UAAU,uFACpCJ,EAAAA,cAACS,EAAAA,KAAI,CAACC,GAAI,YAAYC,IAAUL,EAAOE,gBACpCI,IAAUN,EAAOE,aAEpBR,EAAAA,cAAA,QAAMI,UAAU,iBAAiBE,EAAOO,kBAM3C,EAuBJ,MAgBMC,EAAOA,IAClBd,EAAAA,cAACe,EAAAA,EAAG,CAAChB,MAAO,mCAAoCiB,YAAa,yE","sources":["webpack://micropasts-blog-gatsby/./node_modules/lodash/kebabCase.js","webpack://micropasts-blog-gatsby/./src/pages/authors.js"],"sourcesContent":["var createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\nmodule.exports = kebabCase;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Seo from \"../components/structure/SEO\";\n\n// Utilities\nimport {kebabCase, startCase} from \"lodash\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport Layout  from \"../components/layout\"\nimport {Container,Row} from \"react-bootstrap\"\n\nconst AuthorsPage = ({\n                    data: {\n                      allMarkdownRemark: { group },\n                      site: {\n                        siteMetadata: { title },\n                      },\n                    },\n                  }) => (\n  <Layout>\n    <Container>\n      <Row className={\"post-body\"}>\n        <h1 className=\"ml-4 mt-4\">Tags</h1>\n        <ul className=\"list-group-flush row\">\n          {group.map(author => (\n            <li key={author.fieldValue} className=\"list-item col-md-4 border-top py-2 d-flex justify-content-between align-items-start\">\n              <Link to={`/authors/${kebabCase(author.fieldValue)}/`}>\n                {startCase(author.fieldValue)}\n              </Link>\n              <span className=\"badge bg-dark\">{author.totalCount}</span>\n            </li>\n          ))}\n        </ul>\n      </Row>\n    </Container>\n  </Layout>\n)\n\nAuthorsPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      group: PropTypes.arrayOf(\n        PropTypes.shape({\n          fieldValue: PropTypes.string.isRequired,\n          totalCount: PropTypes.number.isRequired,\n        }).isRequired\n      ),\n    }),\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n  }),\n}\n\nexport default AuthorsPage\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(limit: 2000) {\n            group(field: {frontmatter: {author: SELECT}}) {\n                fieldValue\n                totalCount\n            }\n        }\n    }\n`\n\nexport const Head = () => (\n  <Seo title={\"An index of authors on this site\"} description={\"An indexed view of authors who have written on this site, with counts\"}/>\n)"],"names":["kebabCase","createCompounder","result","word","index","toLowerCase","module","exports","_ref","data","allMarkdownRemark","group","site","siteMetadata","title","React","Layout","Container","Row","className","map","author","key","fieldValue","Link","to","_kebabCase","_startCase","totalCount","Head","Seo","description"],"sourceRoot":""}